generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model cidades {
  id        Int       @id @default(autoincrement())
  nome      String    @db.VarChar(100)
  estado_id Int
  estados   estados   @relation(fields: [estado_id], references: [id], onDelete: NoAction, map: "cidades_ibfk_1")
  pets      pets[]
  usuario   usuario[]

  @@index([estado_id], map: "estado_id")
}

model doencas_deficiencias {
  id   Int    @id @default(autoincrement())
  nome String @db.VarChar(100)
}

model especies {
  id    Int     @id @default(autoincrement())
  nome  String  @db.VarChar(100)
  pets  pets[]
  racas racas[]
}

model estados {
  id      Int       @id @default(autoincrement())
  nome    String    @db.VarChar(255)
  sigla   String    @db.VarChar(255)
  cidades cidades[]
  pets    pets[]
}

model faixas_etarias {
  id         Int    @id @default(autoincrement())
  nome       String @db.VarChar(50)
  idade_max  Int?
  idade_min  Int?
  unidade    String @db.VarChar(10)
  especie_id Int
  pets       pets[]
}

model favoritos {
  id         Int      @id @default(autoincrement())
  usuario_id Int
  pet_id     Int
  createdAt  DateTime @db.DateTime(0)
  updatedAt  DateTime @db.DateTime(0)
  usuario    usuario  @relation(fields: [usuario_id], references: [id], onDelete: NoAction, map: "favoritos_ibfk_1")
  pets       pets     @relation(fields: [pet_id], references: [id], onDelete: NoAction, map: "favoritos_ibfk_2")

  @@index([pet_id], map: "pet_id")
  @@index([usuario_id], map: "usuario_id")
}

model pets {
  id              Int            @id @default(autoincrement())
  especie_id      Int
  nome            String         @db.VarChar(255)
  quantidade      Int
  raca_id         Int
  idade           Int
  faixa_etaria_id Int
  usuario_id      Int
  sexo_id         Int
  motivoDoacao    String         @db.VarChar(255)
  status_id       Int
  foto            Bytes?         @db.Blob
  estado_id       Int
  cidade_id       Int
  favoritos       favoritos[]
  especies        especies       @relation(fields: [especie_id], references: [id], onDelete: NoAction, map: "pets_ibfk_1")
  racas           racas          @relation(fields: [raca_id], references: [id], onDelete: NoAction, map: "pets_ibfk_2")
  faixas_etarias  faixas_etarias @relation(fields: [faixa_etaria_id], references: [id], onDelete: NoAction, map: "pets_ibfk_3")
  usuario         usuario        @relation(fields: [usuario_id], references: [id], onDelete: NoAction, map: "pets_ibfk_4")
  sexos_pet       sexos_pet      @relation(fields: [sexo_id], references: [id], onDelete: NoAction, map: "pets_ibfk_5")
  status          status         @relation(fields: [status_id], references: [id], onDelete: NoAction, map: "pets_ibfk_6")
  estados         estados        @relation(fields: [estado_id], references: [id], onDelete: NoAction, map: "pets_ibfk_7")
  cidades         cidades        @relation(fields: [cidade_id], references: [id], onDelete: NoAction, map: "pets_ibfk_8")

  @@index([cidade_id], map: "cidade_id")
  @@index([especie_id], map: "especie_id")
  @@index([estado_id], map: "estado_id")
  @@index([faixa_etaria_id], map: "faixa_etaria_id")
  @@index([raca_id], map: "raca_id")
  @@index([sexo_id], map: "sexo_id")
  @@index([status_id], map: "status_id")
  @@index([usuario_id], map: "usuario_id")
}

model racas {
  id         Int      @id @default(autoincrement())
  nome       String   @db.VarChar(255)
  especie_id Int
  pets       pets[]
  especies   especies @relation(fields: [especie_id], references: [id], onDelete: NoAction, map: "racas_ibfk_1")

  @@index([especie_id], map: "especie_id")
}

model status {
  id   Int    @id @default(autoincrement())
  nome String @db.VarChar(100)
  pets pets[]
}

model usuario {
  id        Int         @id @default(autoincrement())
  nome      String      @db.VarChar(100)
  sexo      String      @db.VarChar(100)
  telefone  String      @db.VarChar(9)
  email     String      @unique(map: "email") @db.VarChar(255)
  senha     String      @db.VarChar(255)
  cpf       String      @unique(map: "cpf") @db.VarChar(14)
  cep       String?     @db.VarChar(10)
  cidade_id Int
  favoritos favoritos[]
  pets      pets[]
  cidades   cidades     @relation(fields: [cidade_id], references: [id], onDelete: NoAction, map: "usuario_ibfk_1")

  @@index([cidade_id], map: "cidade_id")
}

model petdoencadeficiencia {
  pet_id               Int
  doencaDeficiencia_id Int
  possui               Boolean

  @@id([pet_id, doencaDeficiencia_id])
}

model sexos_pet {
  id        Int    @id @default(autoincrement())
  descricao String @unique(map: "descricao") @db.VarChar(50)
  pets      pets[]
}
